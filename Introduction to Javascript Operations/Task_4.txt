Precedence:-
Precedence refers to the priority or order in which operators are evaluated in an expression. 
Operators with higher precedence are evaluated first.
 If operators have the same precedence, the associativity comes into play.

1)Multiplication (*), division (/), and modulus (%) have higher precedence than addition (+) and subtraction (-). For example:-
let result = 5 + 3 * 2; // Result: 11 (3 * 2 is evaluated first)
2)Parentheses () can be used to override operator precedence:-
let result = (5 + 3) * 2; // Result: 16 (5 + 3 is evaluated first due to parentheses)


Associativity:

Associativity determines the order in which operators of the same precedence are evaluated.
 It can be either left-to-right (left-associative) or right-to-left (right-associative).

For example, the addition (+) operator is left-associative,
 meaning that if multiple addition operators have the same precedence, they are evaluated from left to right:-

 let result = 5 + 3 + 2; // Result: 10 (5 + 3 is evaluated first, then added to 2)

On the other hand, the assignment (=) operator is right-associative:-
let x = y = 10; // Result: x is assigned the value of y, and y is assigned 10

Importance:
Understanding operator precedence and associativity is crucial for writing correct and predictable code. 
Incorrect assumptions about the order of evaluation can lead to unexpected results and bugs. 
It also helps in writing more concise code, 
as explicit parentheses can be used to clarify the intended order of evaluation.

let result = 5 + 3 * 2;
Knowing that multiplication has higher precedence than addition, you can predict that 3 * 2 will be evaluated first. 
If needed, you can use parentheses to make the order of evaluation explicit:-
let result = 5 + (3 * 2);
